// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	appmeshv1beta1 "github.com/aws/aws-app-mesh-controller-for-k8s/pkg/client/listers/appmesh/v1beta1"
	labels "k8s.io/apimachinery/pkg/labels"

	mock "github.com/stretchr/testify/mock"

	v1beta1 "github.com/aws/aws-app-mesh-controller-for-k8s/pkg/apis/appmesh/v1beta1"
)

// VirtualNodeLister is an autogenerated mock type for the VirtualNodeLister type
type VirtualNodeLister struct {
	mock.Mock
}

// List provides a mock function with given fields: selector
func (_m *VirtualNodeLister) List(selector labels.Selector) ([]*v1beta1.VirtualNode, error) {
	ret := _m.Called(selector)

	var r0 []*v1beta1.VirtualNode
	if rf, ok := ret.Get(0).(func(labels.Selector) []*v1beta1.VirtualNode); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.VirtualNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(labels.Selector) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VirtualNodes provides a mock function with given fields: namespace
func (_m *VirtualNodeLister) VirtualNodes(namespace string) appmeshv1beta1.VirtualNodeNamespaceLister {
	ret := _m.Called(namespace)

	var r0 appmeshv1beta1.VirtualNodeNamespaceLister
	if rf, ok := ret.Get(0).(func(string) appmeshv1beta1.VirtualNodeNamespaceLister); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appmeshv1beta1.VirtualNodeNamespaceLister)
		}
	}

	return r0
}
