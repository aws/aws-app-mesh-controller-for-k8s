// Code generated by MockGen. DO NOT EDIT.
// Source: /Volumes/workplace/appmesh-controller/src/AWSLatticeControllerForK8sExternal/pkg/cloudmap/instances_reconciler.go

// Package cloudmap is a generated GoMock package.
package cloudmap

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/aws/aws-app-mesh-controller-for-k8s/apis/appmesh/v1beta2"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockInstancesReconciler is a mock of InstancesReconciler interface.
type MockInstancesReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesReconcilerMockRecorder
}

// MockInstancesReconcilerMockRecorder is the mock recorder for MockInstancesReconciler.
type MockInstancesReconcilerMockRecorder struct {
	mock *MockInstancesReconciler
}

// NewMockInstancesReconciler creates a new mock instance.
func NewMockInstancesReconciler(ctrl *gomock.Controller) *MockInstancesReconciler {
	mock := &MockInstancesReconciler{ctrl: ctrl}
	mock.recorder = &MockInstancesReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesReconciler) EXPECT() *MockInstancesReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockInstancesReconciler) Reconcile(ctx context.Context, ms *v1beta2.Mesh, vn *v1beta2.VirtualNode, service serviceSummary, readyPods, notReadyPods []*v1.Pod, nodeInfoByName map[string]nodeAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, ms, vn, service, readyPods, notReadyPods, nodeInfoByName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockInstancesReconcilerMockRecorder) Reconcile(ctx, ms, vn, service, readyPods, notReadyPods, nodeInfoByName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockInstancesReconciler)(nil).Reconcile), ctx, ms, vn, service, readyPods, notReadyPods, nodeInfoByName)
}
