// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import appmesh "github.com/aws/aws-sdk-go/service/appmesh"
import aws "github.com/aws/aws-app-mesh-controller-for-k8s/pkg/aws"
import context "context"
import mock "github.com/stretchr/testify/mock"
import servicediscovery "github.com/aws/aws-sdk-go/service/servicediscovery"
import v1 "k8s.io/api/core/v1"
import v1beta1 "github.com/aws/aws-app-mesh-controller-for-k8s/pkg/apis/appmesh/v1beta1"

// CloudAPI is an autogenerated mock type for the CloudAPI type
type CloudAPI struct {
	mock.Mock
}

// CloudMapCreateService provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) CloudMapCreateService(_a0 context.Context, _a1 *appmesh.AwsCloudMapServiceDiscovery, _a2 string) (*aws.CloudMapServiceSummary, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.CloudMapServiceSummary
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.AwsCloudMapServiceDiscovery, string) *aws.CloudMapServiceSummary); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.CloudMapServiceSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.AwsCloudMapServiceDiscovery, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudMapGetService provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) CloudMapGetService(_a0 context.Context, _a1 string) (*aws.CloudMapServiceSummary, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.CloudMapServiceSummary
	if rf, ok := ret.Get(0).(func(context.Context, string) *aws.CloudMapServiceSummary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.CloudMapServiceSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMesh provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) CreateMesh(_a0 context.Context, _a1 *v1beta1.Mesh) (*aws.Mesh, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.Mesh
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Mesh) *aws.Mesh); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Mesh)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Mesh) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudAPI) CreateRoute(_a0 context.Context, _a1 *v1beta1.Route, _a2 string, _a3 string) (*aws.Route, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *aws.Route
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Route, string, string) *aws.Route); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Route, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualNode provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) CreateVirtualNode(_a0 context.Context, _a1 *v1beta1.VirtualNode) (*aws.VirtualNode, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.VirtualNode
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.VirtualNode) *aws.VirtualNode); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.VirtualNode) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualRouter provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) CreateVirtualRouter(_a0 context.Context, _a1 *v1beta1.VirtualRouter, _a2 string) (*aws.VirtualRouter, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualRouter
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.VirtualRouter, string) *aws.VirtualRouter); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualRouter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.VirtualRouter, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualService provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) CreateVirtualService(_a0 context.Context, _a1 *v1beta1.VirtualService) (*aws.VirtualService, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.VirtualService
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.VirtualService) *aws.VirtualService); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.VirtualService) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMesh provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) DeleteMesh(_a0 context.Context, _a1 string) (*aws.Mesh, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.Mesh
	if rf, ok := ret.Get(0).(func(context.Context, string) *aws.Mesh); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Mesh)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudAPI) DeleteRoute(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*aws.Route, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *aws.Route
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *aws.Route); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualNode provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) DeleteVirtualNode(_a0 context.Context, _a1 string, _a2 string) (*aws.VirtualNode, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualNode
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aws.VirtualNode); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualRouter provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) DeleteVirtualRouter(_a0 context.Context, _a1 string, _a2 string) (*aws.VirtualRouter, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualRouter
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aws.VirtualRouter); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualRouter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualService provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) DeleteVirtualService(_a0 context.Context, _a1 string, _a2 string) (*aws.VirtualService, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualService
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aws.VirtualService); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstance provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) DeregisterInstance(_a0 context.Context, _a1 string, _a2 *appmesh.AwsCloudMapServiceDiscovery) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *appmesh.AwsCloudMapServiceDiscovery) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMesh provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) GetMesh(_a0 context.Context, _a1 string) (*aws.Mesh, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.Mesh
	if rf, ok := ret.Get(0).(func(context.Context, string) *aws.Mesh); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Mesh)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudAPI) GetRoute(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*aws.Route, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *aws.Route
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *aws.Route); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoutesForVirtualRouter provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) GetRoutesForVirtualRouter(_a0 context.Context, _a1 string, _a2 string) (aws.Routes, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 aws.Routes
	if rf, ok := ret.Get(0).(func(context.Context, string, string) aws.Routes); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aws.Routes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualNode provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) GetVirtualNode(_a0 context.Context, _a1 string, _a2 string) (*aws.VirtualNode, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualNode
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aws.VirtualNode); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualRouter provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) GetVirtualRouter(_a0 context.Context, _a1 string, _a2 string) (*aws.VirtualRouter, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualRouter
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aws.VirtualRouter); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualRouter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualService provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) GetVirtualService(_a0 context.Context, _a1 string, _a2 string) (*aws.VirtualService, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualService
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aws.VirtualService); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) ListInstances(_a0 context.Context, _a1 *appmesh.AwsCloudMapServiceDiscovery) ([]*servicediscovery.InstanceSummary, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*servicediscovery.InstanceSummary
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.AwsCloudMapServiceDiscovery) []*servicediscovery.InstanceSummary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*servicediscovery.InstanceSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.AwsCloudMapServiceDiscovery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstance provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudAPI) RegisterInstance(_a0 context.Context, _a1 string, _a2 *v1.Pod, _a3 *appmesh.AwsCloudMapServiceDiscovery) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Pod, *appmesh.AwsCloudMapServiceDiscovery) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMesh provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) UpdateMesh(_a0 context.Context, _a1 *v1beta1.Mesh) (*aws.Mesh, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.Mesh
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Mesh) *aws.Mesh); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Mesh)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Mesh) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudAPI) UpdateRoute(_a0 context.Context, _a1 *v1beta1.Route, _a2 string, _a3 string) (*aws.Route, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *aws.Route
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Route, string, string) *aws.Route); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Route, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualNode provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) UpdateVirtualNode(_a0 context.Context, _a1 *v1beta1.VirtualNode) (*aws.VirtualNode, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.VirtualNode
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.VirtualNode) *aws.VirtualNode); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.VirtualNode) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualRouter provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudAPI) UpdateVirtualRouter(_a0 context.Context, _a1 *v1beta1.VirtualRouter, _a2 string) (*aws.VirtualRouter, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *aws.VirtualRouter
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.VirtualRouter, string) *aws.VirtualRouter); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualRouter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.VirtualRouter, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualService provides a mock function with given fields: _a0, _a1
func (_m *CloudAPI) UpdateVirtualService(_a0 context.Context, _a1 *v1beta1.VirtualService) (*aws.VirtualService, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.VirtualService
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.VirtualService) *aws.VirtualService); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.VirtualService) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
