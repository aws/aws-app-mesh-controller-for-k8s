// Code generated by MockGen. DO NOT EDIT.
// Source: /Volumes/workplace/appmesh-controller/src/AWSLatticeControllerForK8sExternal/pkg/aws/services/cloudmap.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	servicediscovery "github.com/aws/aws-sdk-go/service/servicediscovery"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudMap is a mock of CloudMap interface.
type MockCloudMap struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMapMockRecorder
}

// MockCloudMapMockRecorder is the mock recorder for MockCloudMap.
type MockCloudMapMockRecorder struct {
	mock *MockCloudMap
}

// NewMockCloudMap creates a new mock instance.
func NewMockCloudMap(ctrl *gomock.Controller) *MockCloudMap {
	mock := &MockCloudMap{ctrl: ctrl}
	mock.recorder = &MockCloudMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudMap) EXPECT() *MockCloudMapMockRecorder {
	return m.recorder
}

// CreateHttpNamespace mocks base method.
func (m *MockCloudMap) CreateHttpNamespace(arg0 *servicediscovery.CreateHttpNamespaceInput) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHttpNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.CreateHttpNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHttpNamespace indicates an expected call of CreateHttpNamespace.
func (mr *MockCloudMapMockRecorder) CreateHttpNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHttpNamespace", reflect.TypeOf((*MockCloudMap)(nil).CreateHttpNamespace), arg0)
}

// CreateHttpNamespaceRequest mocks base method.
func (m *MockCloudMap) CreateHttpNamespaceRequest(arg0 *servicediscovery.CreateHttpNamespaceInput) (*request.Request, *servicediscovery.CreateHttpNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHttpNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.CreateHttpNamespaceOutput)
	return ret0, ret1
}

// CreateHttpNamespaceRequest indicates an expected call of CreateHttpNamespaceRequest.
func (mr *MockCloudMapMockRecorder) CreateHttpNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHttpNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).CreateHttpNamespaceRequest), arg0)
}

// CreateHttpNamespaceWithContext mocks base method.
func (m *MockCloudMap) CreateHttpNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.CreateHttpNamespaceInput, arg2 ...request.Option) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHttpNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.CreateHttpNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHttpNamespaceWithContext indicates an expected call of CreateHttpNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) CreateHttpNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHttpNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).CreateHttpNamespaceWithContext), varargs...)
}

// CreatePrivateDnsNamespace mocks base method.
func (m *MockCloudMap) CreatePrivateDnsNamespace(arg0 *servicediscovery.CreatePrivateDnsNamespaceInput) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateDnsNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.CreatePrivateDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateDnsNamespace indicates an expected call of CreatePrivateDnsNamespace.
func (mr *MockCloudMapMockRecorder) CreatePrivateDnsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateDnsNamespace", reflect.TypeOf((*MockCloudMap)(nil).CreatePrivateDnsNamespace), arg0)
}

// CreatePrivateDnsNamespaceRequest mocks base method.
func (m *MockCloudMap) CreatePrivateDnsNamespaceRequest(arg0 *servicediscovery.CreatePrivateDnsNamespaceInput) (*request.Request, *servicediscovery.CreatePrivateDnsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateDnsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.CreatePrivateDnsNamespaceOutput)
	return ret0, ret1
}

// CreatePrivateDnsNamespaceRequest indicates an expected call of CreatePrivateDnsNamespaceRequest.
func (mr *MockCloudMapMockRecorder) CreatePrivateDnsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateDnsNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).CreatePrivateDnsNamespaceRequest), arg0)
}

// CreatePrivateDnsNamespaceWithContext mocks base method.
func (m *MockCloudMap) CreatePrivateDnsNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.CreatePrivateDnsNamespaceInput, arg2 ...request.Option) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivateDnsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.CreatePrivateDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateDnsNamespaceWithContext indicates an expected call of CreatePrivateDnsNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) CreatePrivateDnsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateDnsNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).CreatePrivateDnsNamespaceWithContext), varargs...)
}

// CreatePublicDnsNamespace mocks base method.
func (m *MockCloudMap) CreatePublicDnsNamespace(arg0 *servicediscovery.CreatePublicDnsNamespaceInput) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicDnsNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.CreatePublicDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicDnsNamespace indicates an expected call of CreatePublicDnsNamespace.
func (mr *MockCloudMapMockRecorder) CreatePublicDnsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicDnsNamespace", reflect.TypeOf((*MockCloudMap)(nil).CreatePublicDnsNamespace), arg0)
}

// CreatePublicDnsNamespaceRequest mocks base method.
func (m *MockCloudMap) CreatePublicDnsNamespaceRequest(arg0 *servicediscovery.CreatePublicDnsNamespaceInput) (*request.Request, *servicediscovery.CreatePublicDnsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicDnsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.CreatePublicDnsNamespaceOutput)
	return ret0, ret1
}

// CreatePublicDnsNamespaceRequest indicates an expected call of CreatePublicDnsNamespaceRequest.
func (mr *MockCloudMapMockRecorder) CreatePublicDnsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicDnsNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).CreatePublicDnsNamespaceRequest), arg0)
}

// CreatePublicDnsNamespaceWithContext mocks base method.
func (m *MockCloudMap) CreatePublicDnsNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.CreatePublicDnsNamespaceInput, arg2 ...request.Option) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePublicDnsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.CreatePublicDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicDnsNamespaceWithContext indicates an expected call of CreatePublicDnsNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) CreatePublicDnsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicDnsNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).CreatePublicDnsNamespaceWithContext), varargs...)
}

// CreateService mocks base method.
func (m *MockCloudMap) CreateService(arg0 *servicediscovery.CreateServiceInput) (*servicediscovery.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*servicediscovery.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockCloudMapMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockCloudMap)(nil).CreateService), arg0)
}

// CreateServiceRequest mocks base method.
func (m *MockCloudMap) CreateServiceRequest(arg0 *servicediscovery.CreateServiceInput) (*request.Request, *servicediscovery.CreateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.CreateServiceOutput)
	return ret0, ret1
}

// CreateServiceRequest indicates an expected call of CreateServiceRequest.
func (mr *MockCloudMapMockRecorder) CreateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceRequest", reflect.TypeOf((*MockCloudMap)(nil).CreateServiceRequest), arg0)
}

// CreateServiceWithContext mocks base method.
func (m *MockCloudMap) CreateServiceWithContext(arg0 aws.Context, arg1 *servicediscovery.CreateServiceInput, arg2 ...request.Option) (*servicediscovery.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceWithContext indicates an expected call of CreateServiceWithContext.
func (mr *MockCloudMapMockRecorder) CreateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceWithContext", reflect.TypeOf((*MockCloudMap)(nil).CreateServiceWithContext), varargs...)
}

// DeleteNamespace mocks base method.
func (m *MockCloudMap) DeleteNamespace(arg0 *servicediscovery.DeleteNamespaceInput) (*servicediscovery.DeleteNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.DeleteNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockCloudMapMockRecorder) DeleteNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockCloudMap)(nil).DeleteNamespace), arg0)
}

// DeleteNamespaceRequest mocks base method.
func (m *MockCloudMap) DeleteNamespaceRequest(arg0 *servicediscovery.DeleteNamespaceInput) (*request.Request, *servicediscovery.DeleteNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.DeleteNamespaceOutput)
	return ret0, ret1
}

// DeleteNamespaceRequest indicates an expected call of DeleteNamespaceRequest.
func (mr *MockCloudMapMockRecorder) DeleteNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).DeleteNamespaceRequest), arg0)
}

// DeleteNamespaceWithContext mocks base method.
func (m *MockCloudMap) DeleteNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.DeleteNamespaceInput, arg2 ...request.Option) (*servicediscovery.DeleteNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.DeleteNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceWithContext indicates an expected call of DeleteNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) DeleteNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).DeleteNamespaceWithContext), varargs...)
}

// DeleteService mocks base method.
func (m *MockCloudMap) DeleteService(arg0 *servicediscovery.DeleteServiceInput) (*servicediscovery.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*servicediscovery.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockCloudMapMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockCloudMap)(nil).DeleteService), arg0)
}

// DeleteServiceRequest mocks base method.
func (m *MockCloudMap) DeleteServiceRequest(arg0 *servicediscovery.DeleteServiceInput) (*request.Request, *servicediscovery.DeleteServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.DeleteServiceOutput)
	return ret0, ret1
}

// DeleteServiceRequest indicates an expected call of DeleteServiceRequest.
func (mr *MockCloudMapMockRecorder) DeleteServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceRequest", reflect.TypeOf((*MockCloudMap)(nil).DeleteServiceRequest), arg0)
}

// DeleteServiceWithContext mocks base method.
func (m *MockCloudMap) DeleteServiceWithContext(arg0 aws.Context, arg1 *servicediscovery.DeleteServiceInput, arg2 ...request.Option) (*servicediscovery.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceWithContext indicates an expected call of DeleteServiceWithContext.
func (mr *MockCloudMapMockRecorder) DeleteServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceWithContext", reflect.TypeOf((*MockCloudMap)(nil).DeleteServiceWithContext), varargs...)
}

// DeregisterInstance mocks base method.
func (m *MockCloudMap) DeregisterInstance(arg0 *servicediscovery.DeregisterInstanceInput) (*servicediscovery.DeregisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstance", arg0)
	ret0, _ := ret[0].(*servicediscovery.DeregisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterInstance indicates an expected call of DeregisterInstance.
func (mr *MockCloudMapMockRecorder) DeregisterInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstance", reflect.TypeOf((*MockCloudMap)(nil).DeregisterInstance), arg0)
}

// DeregisterInstanceRequest mocks base method.
func (m *MockCloudMap) DeregisterInstanceRequest(arg0 *servicediscovery.DeregisterInstanceInput) (*request.Request, *servicediscovery.DeregisterInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.DeregisterInstanceOutput)
	return ret0, ret1
}

// DeregisterInstanceRequest indicates an expected call of DeregisterInstanceRequest.
func (mr *MockCloudMapMockRecorder) DeregisterInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstanceRequest", reflect.TypeOf((*MockCloudMap)(nil).DeregisterInstanceRequest), arg0)
}

// DeregisterInstanceWithContext mocks base method.
func (m *MockCloudMap) DeregisterInstanceWithContext(arg0 aws.Context, arg1 *servicediscovery.DeregisterInstanceInput, arg2 ...request.Option) (*servicediscovery.DeregisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.DeregisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterInstanceWithContext indicates an expected call of DeregisterInstanceWithContext.
func (mr *MockCloudMapMockRecorder) DeregisterInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstanceWithContext", reflect.TypeOf((*MockCloudMap)(nil).DeregisterInstanceWithContext), varargs...)
}

// DiscoverInstances mocks base method.
func (m *MockCloudMap) DiscoverInstances(arg0 *servicediscovery.DiscoverInstancesInput) (*servicediscovery.DiscoverInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverInstances", arg0)
	ret0, _ := ret[0].(*servicediscovery.DiscoverInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverInstances indicates an expected call of DiscoverInstances.
func (mr *MockCloudMapMockRecorder) DiscoverInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverInstances", reflect.TypeOf((*MockCloudMap)(nil).DiscoverInstances), arg0)
}

// DiscoverInstancesRequest mocks base method.
func (m *MockCloudMap) DiscoverInstancesRequest(arg0 *servicediscovery.DiscoverInstancesInput) (*request.Request, *servicediscovery.DiscoverInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.DiscoverInstancesOutput)
	return ret0, ret1
}

// DiscoverInstancesRequest indicates an expected call of DiscoverInstancesRequest.
func (mr *MockCloudMapMockRecorder) DiscoverInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverInstancesRequest", reflect.TypeOf((*MockCloudMap)(nil).DiscoverInstancesRequest), arg0)
}

// DiscoverInstancesWithContext mocks base method.
func (m *MockCloudMap) DiscoverInstancesWithContext(arg0 aws.Context, arg1 *servicediscovery.DiscoverInstancesInput, arg2 ...request.Option) (*servicediscovery.DiscoverInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DiscoverInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.DiscoverInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverInstancesWithContext indicates an expected call of DiscoverInstancesWithContext.
func (mr *MockCloudMapMockRecorder) DiscoverInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverInstancesWithContext", reflect.TypeOf((*MockCloudMap)(nil).DiscoverInstancesWithContext), varargs...)
}

// GetInstance mocks base method.
func (m *MockCloudMap) GetInstance(arg0 *servicediscovery.GetInstanceInput) (*servicediscovery.GetInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(*servicediscovery.GetInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockCloudMapMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockCloudMap)(nil).GetInstance), arg0)
}

// GetInstanceRequest mocks base method.
func (m *MockCloudMap) GetInstanceRequest(arg0 *servicediscovery.GetInstanceInput) (*request.Request, *servicediscovery.GetInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.GetInstanceOutput)
	return ret0, ret1
}

// GetInstanceRequest indicates an expected call of GetInstanceRequest.
func (mr *MockCloudMapMockRecorder) GetInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceRequest", reflect.TypeOf((*MockCloudMap)(nil).GetInstanceRequest), arg0)
}

// GetInstanceWithContext mocks base method.
func (m *MockCloudMap) GetInstanceWithContext(arg0 aws.Context, arg1 *servicediscovery.GetInstanceInput, arg2 ...request.Option) (*servicediscovery.GetInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.GetInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceWithContext indicates an expected call of GetInstanceWithContext.
func (mr *MockCloudMapMockRecorder) GetInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceWithContext", reflect.TypeOf((*MockCloudMap)(nil).GetInstanceWithContext), varargs...)
}

// GetInstancesHealthStatus mocks base method.
func (m *MockCloudMap) GetInstancesHealthStatus(arg0 *servicediscovery.GetInstancesHealthStatusInput) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesHealthStatus", arg0)
	ret0, _ := ret[0].(*servicediscovery.GetInstancesHealthStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesHealthStatus indicates an expected call of GetInstancesHealthStatus.
func (mr *MockCloudMapMockRecorder) GetInstancesHealthStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesHealthStatus", reflect.TypeOf((*MockCloudMap)(nil).GetInstancesHealthStatus), arg0)
}

// GetInstancesHealthStatusPages mocks base method.
func (m *MockCloudMap) GetInstancesHealthStatusPages(arg0 *servicediscovery.GetInstancesHealthStatusInput, arg1 func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesHealthStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInstancesHealthStatusPages indicates an expected call of GetInstancesHealthStatusPages.
func (mr *MockCloudMapMockRecorder) GetInstancesHealthStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesHealthStatusPages", reflect.TypeOf((*MockCloudMap)(nil).GetInstancesHealthStatusPages), arg0, arg1)
}

// GetInstancesHealthStatusPagesWithContext mocks base method.
func (m *MockCloudMap) GetInstancesHealthStatusPagesWithContext(arg0 aws.Context, arg1 *servicediscovery.GetInstancesHealthStatusInput, arg2 func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstancesHealthStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInstancesHealthStatusPagesWithContext indicates an expected call of GetInstancesHealthStatusPagesWithContext.
func (mr *MockCloudMapMockRecorder) GetInstancesHealthStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesHealthStatusPagesWithContext", reflect.TypeOf((*MockCloudMap)(nil).GetInstancesHealthStatusPagesWithContext), varargs...)
}

// GetInstancesHealthStatusRequest mocks base method.
func (m *MockCloudMap) GetInstancesHealthStatusRequest(arg0 *servicediscovery.GetInstancesHealthStatusInput) (*request.Request, *servicediscovery.GetInstancesHealthStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesHealthStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.GetInstancesHealthStatusOutput)
	return ret0, ret1
}

// GetInstancesHealthStatusRequest indicates an expected call of GetInstancesHealthStatusRequest.
func (mr *MockCloudMapMockRecorder) GetInstancesHealthStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesHealthStatusRequest", reflect.TypeOf((*MockCloudMap)(nil).GetInstancesHealthStatusRequest), arg0)
}

// GetInstancesHealthStatusWithContext mocks base method.
func (m *MockCloudMap) GetInstancesHealthStatusWithContext(arg0 aws.Context, arg1 *servicediscovery.GetInstancesHealthStatusInput, arg2 ...request.Option) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstancesHealthStatusWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.GetInstancesHealthStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesHealthStatusWithContext indicates an expected call of GetInstancesHealthStatusWithContext.
func (mr *MockCloudMapMockRecorder) GetInstancesHealthStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesHealthStatusWithContext", reflect.TypeOf((*MockCloudMap)(nil).GetInstancesHealthStatusWithContext), varargs...)
}

// GetNamespace mocks base method.
func (m *MockCloudMap) GetNamespace(arg0 *servicediscovery.GetNamespaceInput) (*servicediscovery.GetNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.GetNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockCloudMapMockRecorder) GetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockCloudMap)(nil).GetNamespace), arg0)
}

// GetNamespaceRequest mocks base method.
func (m *MockCloudMap) GetNamespaceRequest(arg0 *servicediscovery.GetNamespaceInput) (*request.Request, *servicediscovery.GetNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.GetNamespaceOutput)
	return ret0, ret1
}

// GetNamespaceRequest indicates an expected call of GetNamespaceRequest.
func (mr *MockCloudMapMockRecorder) GetNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).GetNamespaceRequest), arg0)
}

// GetNamespaceWithContext mocks base method.
func (m *MockCloudMap) GetNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.GetNamespaceInput, arg2 ...request.Option) (*servicediscovery.GetNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.GetNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceWithContext indicates an expected call of GetNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) GetNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).GetNamespaceWithContext), varargs...)
}

// GetOperation mocks base method.
func (m *MockCloudMap) GetOperation(arg0 *servicediscovery.GetOperationInput) (*servicediscovery.GetOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0)
	ret0, _ := ret[0].(*servicediscovery.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockCloudMapMockRecorder) GetOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockCloudMap)(nil).GetOperation), arg0)
}

// GetOperationRequest mocks base method.
func (m *MockCloudMap) GetOperationRequest(arg0 *servicediscovery.GetOperationInput) (*request.Request, *servicediscovery.GetOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.GetOperationOutput)
	return ret0, ret1
}

// GetOperationRequest indicates an expected call of GetOperationRequest.
func (mr *MockCloudMapMockRecorder) GetOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationRequest", reflect.TypeOf((*MockCloudMap)(nil).GetOperationRequest), arg0)
}

// GetOperationWithContext mocks base method.
func (m *MockCloudMap) GetOperationWithContext(arg0 aws.Context, arg1 *servicediscovery.GetOperationInput, arg2 ...request.Option) (*servicediscovery.GetOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWithContext indicates an expected call of GetOperationWithContext.
func (mr *MockCloudMapMockRecorder) GetOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWithContext", reflect.TypeOf((*MockCloudMap)(nil).GetOperationWithContext), varargs...)
}

// GetService mocks base method.
func (m *MockCloudMap) GetService(arg0 *servicediscovery.GetServiceInput) (*servicediscovery.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*servicediscovery.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockCloudMapMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockCloudMap)(nil).GetService), arg0)
}

// GetServiceRequest mocks base method.
func (m *MockCloudMap) GetServiceRequest(arg0 *servicediscovery.GetServiceInput) (*request.Request, *servicediscovery.GetServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.GetServiceOutput)
	return ret0, ret1
}

// GetServiceRequest indicates an expected call of GetServiceRequest.
func (mr *MockCloudMapMockRecorder) GetServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequest", reflect.TypeOf((*MockCloudMap)(nil).GetServiceRequest), arg0)
}

// GetServiceWithContext mocks base method.
func (m *MockCloudMap) GetServiceWithContext(arg0 aws.Context, arg1 *servicediscovery.GetServiceInput, arg2 ...request.Option) (*servicediscovery.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext.
func (mr *MockCloudMapMockRecorder) GetServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockCloudMap)(nil).GetServiceWithContext), varargs...)
}

// ListInstances mocks base method.
func (m *MockCloudMap) ListInstances(arg0 *servicediscovery.ListInstancesInput) (*servicediscovery.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0)
	ret0, _ := ret[0].(*servicediscovery.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockCloudMapMockRecorder) ListInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockCloudMap)(nil).ListInstances), arg0)
}

// ListInstancesPages mocks base method.
func (m *MockCloudMap) ListInstancesPages(arg0 *servicediscovery.ListInstancesInput, arg1 func(*servicediscovery.ListInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPages indicates an expected call of ListInstancesPages.
func (mr *MockCloudMapMockRecorder) ListInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPages", reflect.TypeOf((*MockCloudMap)(nil).ListInstancesPages), arg0, arg1)
}

// ListInstancesPagesWithContext mocks base method.
func (m *MockCloudMap) ListInstancesPagesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListInstancesInput, arg2 func(*servicediscovery.ListInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPagesWithContext indicates an expected call of ListInstancesPagesWithContext.
func (mr *MockCloudMapMockRecorder) ListInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPagesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListInstancesPagesWithContext), varargs...)
}

// ListInstancesRequest mocks base method.
func (m *MockCloudMap) ListInstancesRequest(arg0 *servicediscovery.ListInstancesInput) (*request.Request, *servicediscovery.ListInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.ListInstancesOutput)
	return ret0, ret1
}

// ListInstancesRequest indicates an expected call of ListInstancesRequest.
func (mr *MockCloudMapMockRecorder) ListInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesRequest", reflect.TypeOf((*MockCloudMap)(nil).ListInstancesRequest), arg0)
}

// ListInstancesWithContext mocks base method.
func (m *MockCloudMap) ListInstancesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListInstancesInput, arg2 ...request.Option) (*servicediscovery.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstancesWithContext indicates an expected call of ListInstancesWithContext.
func (mr *MockCloudMapMockRecorder) ListInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListInstancesWithContext), varargs...)
}

// ListNamespaces mocks base method.
func (m *MockCloudMap) ListNamespaces(arg0 *servicediscovery.ListNamespacesInput) (*servicediscovery.ListNamespacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", arg0)
	ret0, _ := ret[0].(*servicediscovery.ListNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockCloudMapMockRecorder) ListNamespaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockCloudMap)(nil).ListNamespaces), arg0)
}

// ListNamespacesPages mocks base method.
func (m *MockCloudMap) ListNamespacesPages(arg0 *servicediscovery.ListNamespacesInput, arg1 func(*servicediscovery.ListNamespacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNamespacesPages indicates an expected call of ListNamespacesPages.
func (mr *MockCloudMapMockRecorder) ListNamespacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesPages", reflect.TypeOf((*MockCloudMap)(nil).ListNamespacesPages), arg0, arg1)
}

// ListNamespacesPagesWithContext mocks base method.
func (m *MockCloudMap) ListNamespacesPagesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListNamespacesInput, arg2 func(*servicediscovery.ListNamespacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNamespacesPagesWithContext indicates an expected call of ListNamespacesPagesWithContext.
func (mr *MockCloudMapMockRecorder) ListNamespacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesPagesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListNamespacesPagesWithContext), varargs...)
}

// ListNamespacesRequest mocks base method.
func (m *MockCloudMap) ListNamespacesRequest(arg0 *servicediscovery.ListNamespacesInput) (*request.Request, *servicediscovery.ListNamespacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.ListNamespacesOutput)
	return ret0, ret1
}

// ListNamespacesRequest indicates an expected call of ListNamespacesRequest.
func (mr *MockCloudMapMockRecorder) ListNamespacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesRequest", reflect.TypeOf((*MockCloudMap)(nil).ListNamespacesRequest), arg0)
}

// ListNamespacesWithContext mocks base method.
func (m *MockCloudMap) ListNamespacesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListNamespacesInput, arg2 ...request.Option) (*servicediscovery.ListNamespacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespacesWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.ListNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespacesWithContext indicates an expected call of ListNamespacesWithContext.
func (mr *MockCloudMapMockRecorder) ListNamespacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListNamespacesWithContext), varargs...)
}

// ListOperations mocks base method.
func (m *MockCloudMap) ListOperations(arg0 *servicediscovery.ListOperationsInput) (*servicediscovery.ListOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", arg0)
	ret0, _ := ret[0].(*servicediscovery.ListOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockCloudMapMockRecorder) ListOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockCloudMap)(nil).ListOperations), arg0)
}

// ListOperationsPages mocks base method.
func (m *MockCloudMap) ListOperationsPages(arg0 *servicediscovery.ListOperationsInput, arg1 func(*servicediscovery.ListOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOperationsPages indicates an expected call of ListOperationsPages.
func (mr *MockCloudMapMockRecorder) ListOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsPages", reflect.TypeOf((*MockCloudMap)(nil).ListOperationsPages), arg0, arg1)
}

// ListOperationsPagesWithContext mocks base method.
func (m *MockCloudMap) ListOperationsPagesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListOperationsInput, arg2 func(*servicediscovery.ListOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOperationsPagesWithContext indicates an expected call of ListOperationsPagesWithContext.
func (mr *MockCloudMapMockRecorder) ListOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsPagesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListOperationsPagesWithContext), varargs...)
}

// ListOperationsRequest mocks base method.
func (m *MockCloudMap) ListOperationsRequest(arg0 *servicediscovery.ListOperationsInput) (*request.Request, *servicediscovery.ListOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.ListOperationsOutput)
	return ret0, ret1
}

// ListOperationsRequest indicates an expected call of ListOperationsRequest.
func (mr *MockCloudMapMockRecorder) ListOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsRequest", reflect.TypeOf((*MockCloudMap)(nil).ListOperationsRequest), arg0)
}

// ListOperationsWithContext mocks base method.
func (m *MockCloudMap) ListOperationsWithContext(arg0 aws.Context, arg1 *servicediscovery.ListOperationsInput, arg2 ...request.Option) (*servicediscovery.ListOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.ListOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperationsWithContext indicates an expected call of ListOperationsWithContext.
func (mr *MockCloudMapMockRecorder) ListOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListOperationsWithContext), varargs...)
}

// ListServices mocks base method.
func (m *MockCloudMap) ListServices(arg0 *servicediscovery.ListServicesInput) (*servicediscovery.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*servicediscovery.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockCloudMapMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockCloudMap)(nil).ListServices), arg0)
}

// ListServicesPages mocks base method.
func (m *MockCloudMap) ListServicesPages(arg0 *servicediscovery.ListServicesInput, arg1 func(*servicediscovery.ListServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPages indicates an expected call of ListServicesPages.
func (mr *MockCloudMapMockRecorder) ListServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPages", reflect.TypeOf((*MockCloudMap)(nil).ListServicesPages), arg0, arg1)
}

// ListServicesPagesWithContext mocks base method.
func (m *MockCloudMap) ListServicesPagesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListServicesInput, arg2 func(*servicediscovery.ListServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPagesWithContext indicates an expected call of ListServicesPagesWithContext.
func (mr *MockCloudMapMockRecorder) ListServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPagesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListServicesPagesWithContext), varargs...)
}

// ListServicesRequest mocks base method.
func (m *MockCloudMap) ListServicesRequest(arg0 *servicediscovery.ListServicesInput) (*request.Request, *servicediscovery.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest.
func (mr *MockCloudMapMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockCloudMap)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method.
func (m *MockCloudMap) ListServicesWithContext(arg0 aws.Context, arg1 *servicediscovery.ListServicesInput, arg2 ...request.Option) (*servicediscovery.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext.
func (mr *MockCloudMapMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockCloudMap) ListTagsForResource(arg0 *servicediscovery.ListTagsForResourceInput) (*servicediscovery.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*servicediscovery.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockCloudMapMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudMap)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockCloudMap) ListTagsForResourceRequest(arg0 *servicediscovery.ListTagsForResourceInput) (*request.Request, *servicediscovery.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockCloudMapMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudMap)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockCloudMap) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *servicediscovery.ListTagsForResourceInput, arg2 ...request.Option) (*servicediscovery.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockCloudMapMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudMap)(nil).ListTagsForResourceWithContext), varargs...)
}

// RegisterInstance mocks base method.
func (m *MockCloudMap) RegisterInstance(arg0 *servicediscovery.RegisterInstanceInput) (*servicediscovery.RegisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstance", arg0)
	ret0, _ := ret[0].(*servicediscovery.RegisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInstance indicates an expected call of RegisterInstance.
func (mr *MockCloudMapMockRecorder) RegisterInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstance", reflect.TypeOf((*MockCloudMap)(nil).RegisterInstance), arg0)
}

// RegisterInstanceRequest mocks base method.
func (m *MockCloudMap) RegisterInstanceRequest(arg0 *servicediscovery.RegisterInstanceInput) (*request.Request, *servicediscovery.RegisterInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.RegisterInstanceOutput)
	return ret0, ret1
}

// RegisterInstanceRequest indicates an expected call of RegisterInstanceRequest.
func (mr *MockCloudMapMockRecorder) RegisterInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstanceRequest", reflect.TypeOf((*MockCloudMap)(nil).RegisterInstanceRequest), arg0)
}

// RegisterInstanceWithContext mocks base method.
func (m *MockCloudMap) RegisterInstanceWithContext(arg0 aws.Context, arg1 *servicediscovery.RegisterInstanceInput, arg2 ...request.Option) (*servicediscovery.RegisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.RegisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInstanceWithContext indicates an expected call of RegisterInstanceWithContext.
func (mr *MockCloudMapMockRecorder) RegisterInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstanceWithContext", reflect.TypeOf((*MockCloudMap)(nil).RegisterInstanceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockCloudMap) TagResource(arg0 *servicediscovery.TagResourceInput) (*servicediscovery.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*servicediscovery.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockCloudMapMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudMap)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockCloudMap) TagResourceRequest(arg0 *servicediscovery.TagResourceInput) (*request.Request, *servicediscovery.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockCloudMapMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudMap)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockCloudMap) TagResourceWithContext(arg0 aws.Context, arg1 *servicediscovery.TagResourceInput, arg2 ...request.Option) (*servicediscovery.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockCloudMapMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudMap)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockCloudMap) UntagResource(arg0 *servicediscovery.UntagResourceInput) (*servicediscovery.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*servicediscovery.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockCloudMapMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudMap)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockCloudMap) UntagResourceRequest(arg0 *servicediscovery.UntagResourceInput) (*request.Request, *servicediscovery.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockCloudMapMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudMap)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockCloudMap) UntagResourceWithContext(arg0 aws.Context, arg1 *servicediscovery.UntagResourceInput, arg2 ...request.Option) (*servicediscovery.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockCloudMapMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudMap)(nil).UntagResourceWithContext), varargs...)
}

// UpdateHttpNamespace mocks base method.
func (m *MockCloudMap) UpdateHttpNamespace(arg0 *servicediscovery.UpdateHttpNamespaceInput) (*servicediscovery.UpdateHttpNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHttpNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.UpdateHttpNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHttpNamespace indicates an expected call of UpdateHttpNamespace.
func (mr *MockCloudMapMockRecorder) UpdateHttpNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHttpNamespace", reflect.TypeOf((*MockCloudMap)(nil).UpdateHttpNamespace), arg0)
}

// UpdateHttpNamespaceRequest mocks base method.
func (m *MockCloudMap) UpdateHttpNamespaceRequest(arg0 *servicediscovery.UpdateHttpNamespaceInput) (*request.Request, *servicediscovery.UpdateHttpNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHttpNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.UpdateHttpNamespaceOutput)
	return ret0, ret1
}

// UpdateHttpNamespaceRequest indicates an expected call of UpdateHttpNamespaceRequest.
func (mr *MockCloudMapMockRecorder) UpdateHttpNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHttpNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).UpdateHttpNamespaceRequest), arg0)
}

// UpdateHttpNamespaceWithContext mocks base method.
func (m *MockCloudMap) UpdateHttpNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.UpdateHttpNamespaceInput, arg2 ...request.Option) (*servicediscovery.UpdateHttpNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHttpNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.UpdateHttpNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHttpNamespaceWithContext indicates an expected call of UpdateHttpNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) UpdateHttpNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHttpNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).UpdateHttpNamespaceWithContext), varargs...)
}

// UpdateInstanceCustomHealthStatus mocks base method.
func (m *MockCloudMap) UpdateInstanceCustomHealthStatus(arg0 *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceCustomHealthStatus", arg0)
	ret0, _ := ret[0].(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceCustomHealthStatus indicates an expected call of UpdateInstanceCustomHealthStatus.
func (mr *MockCloudMapMockRecorder) UpdateInstanceCustomHealthStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceCustomHealthStatus", reflect.TypeOf((*MockCloudMap)(nil).UpdateInstanceCustomHealthStatus), arg0)
}

// UpdateInstanceCustomHealthStatusRequest mocks base method.
func (m *MockCloudMap) UpdateInstanceCustomHealthStatusRequest(arg0 *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*request.Request, *servicediscovery.UpdateInstanceCustomHealthStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceCustomHealthStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
	return ret0, ret1
}

// UpdateInstanceCustomHealthStatusRequest indicates an expected call of UpdateInstanceCustomHealthStatusRequest.
func (mr *MockCloudMapMockRecorder) UpdateInstanceCustomHealthStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceCustomHealthStatusRequest", reflect.TypeOf((*MockCloudMap)(nil).UpdateInstanceCustomHealthStatusRequest), arg0)
}

// UpdateInstanceCustomHealthStatusWithContext mocks base method.
func (m *MockCloudMap) UpdateInstanceCustomHealthStatusWithContext(arg0 aws.Context, arg1 *servicediscovery.UpdateInstanceCustomHealthStatusInput, arg2 ...request.Option) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstanceCustomHealthStatusWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceCustomHealthStatusWithContext indicates an expected call of UpdateInstanceCustomHealthStatusWithContext.
func (mr *MockCloudMapMockRecorder) UpdateInstanceCustomHealthStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceCustomHealthStatusWithContext", reflect.TypeOf((*MockCloudMap)(nil).UpdateInstanceCustomHealthStatusWithContext), varargs...)
}

// UpdatePrivateDnsNamespace mocks base method.
func (m *MockCloudMap) UpdatePrivateDnsNamespace(arg0 *servicediscovery.UpdatePrivateDnsNamespaceInput) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateDnsNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.UpdatePrivateDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateDnsNamespace indicates an expected call of UpdatePrivateDnsNamespace.
func (mr *MockCloudMapMockRecorder) UpdatePrivateDnsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateDnsNamespace", reflect.TypeOf((*MockCloudMap)(nil).UpdatePrivateDnsNamespace), arg0)
}

// UpdatePrivateDnsNamespaceRequest mocks base method.
func (m *MockCloudMap) UpdatePrivateDnsNamespaceRequest(arg0 *servicediscovery.UpdatePrivateDnsNamespaceInput) (*request.Request, *servicediscovery.UpdatePrivateDnsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateDnsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.UpdatePrivateDnsNamespaceOutput)
	return ret0, ret1
}

// UpdatePrivateDnsNamespaceRequest indicates an expected call of UpdatePrivateDnsNamespaceRequest.
func (mr *MockCloudMapMockRecorder) UpdatePrivateDnsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateDnsNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).UpdatePrivateDnsNamespaceRequest), arg0)
}

// UpdatePrivateDnsNamespaceWithContext mocks base method.
func (m *MockCloudMap) UpdatePrivateDnsNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.UpdatePrivateDnsNamespaceInput, arg2 ...request.Option) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePrivateDnsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.UpdatePrivateDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateDnsNamespaceWithContext indicates an expected call of UpdatePrivateDnsNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) UpdatePrivateDnsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateDnsNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).UpdatePrivateDnsNamespaceWithContext), varargs...)
}

// UpdatePublicDnsNamespace mocks base method.
func (m *MockCloudMap) UpdatePublicDnsNamespace(arg0 *servicediscovery.UpdatePublicDnsNamespaceInput) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicDnsNamespace", arg0)
	ret0, _ := ret[0].(*servicediscovery.UpdatePublicDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicDnsNamespace indicates an expected call of UpdatePublicDnsNamespace.
func (mr *MockCloudMapMockRecorder) UpdatePublicDnsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicDnsNamespace", reflect.TypeOf((*MockCloudMap)(nil).UpdatePublicDnsNamespace), arg0)
}

// UpdatePublicDnsNamespaceRequest mocks base method.
func (m *MockCloudMap) UpdatePublicDnsNamespaceRequest(arg0 *servicediscovery.UpdatePublicDnsNamespaceInput) (*request.Request, *servicediscovery.UpdatePublicDnsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicDnsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.UpdatePublicDnsNamespaceOutput)
	return ret0, ret1
}

// UpdatePublicDnsNamespaceRequest indicates an expected call of UpdatePublicDnsNamespaceRequest.
func (mr *MockCloudMapMockRecorder) UpdatePublicDnsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicDnsNamespaceRequest", reflect.TypeOf((*MockCloudMap)(nil).UpdatePublicDnsNamespaceRequest), arg0)
}

// UpdatePublicDnsNamespaceWithContext mocks base method.
func (m *MockCloudMap) UpdatePublicDnsNamespaceWithContext(arg0 aws.Context, arg1 *servicediscovery.UpdatePublicDnsNamespaceInput, arg2 ...request.Option) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePublicDnsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.UpdatePublicDnsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicDnsNamespaceWithContext indicates an expected call of UpdatePublicDnsNamespaceWithContext.
func (mr *MockCloudMapMockRecorder) UpdatePublicDnsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicDnsNamespaceWithContext", reflect.TypeOf((*MockCloudMap)(nil).UpdatePublicDnsNamespaceWithContext), varargs...)
}

// UpdateService mocks base method.
func (m *MockCloudMap) UpdateService(arg0 *servicediscovery.UpdateServiceInput) (*servicediscovery.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*servicediscovery.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockCloudMapMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockCloudMap)(nil).UpdateService), arg0)
}

// UpdateServiceRequest mocks base method.
func (m *MockCloudMap) UpdateServiceRequest(arg0 *servicediscovery.UpdateServiceInput) (*request.Request, *servicediscovery.UpdateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicediscovery.UpdateServiceOutput)
	return ret0, ret1
}

// UpdateServiceRequest indicates an expected call of UpdateServiceRequest.
func (mr *MockCloudMapMockRecorder) UpdateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceRequest", reflect.TypeOf((*MockCloudMap)(nil).UpdateServiceRequest), arg0)
}

// UpdateServiceWithContext mocks base method.
func (m *MockCloudMap) UpdateServiceWithContext(arg0 aws.Context, arg1 *servicediscovery.UpdateServiceInput, arg2 ...request.Option) (*servicediscovery.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*servicediscovery.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceWithContext indicates an expected call of UpdateServiceWithContext.
func (mr *MockCloudMapMockRecorder) UpdateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceWithContext", reflect.TypeOf((*MockCloudMap)(nil).UpdateServiceWithContext), varargs...)
}
