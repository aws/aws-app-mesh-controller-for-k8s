// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/apimachinery/pkg/conversion (interfaces: Scope)

// Package mock_conversion is a generated GoMock package.
package mock_conversion

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	conversion "k8s.io/apimachinery/pkg/conversion"
)

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockScope) Convert(arg0, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Convert indicates an expected call of Convert.
func (mr *MockScopeMockRecorder) Convert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockScope)(nil).Convert), arg0, arg1)
}

// Meta mocks base method.
func (m *MockScope) Meta() *conversion.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*conversion.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockScopeMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockScope)(nil).Meta))
}
